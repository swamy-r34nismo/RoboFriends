{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","Response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAgBeA,EAdF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAE1B,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACE,4BAAKF,GACL,2BAAIC,MCWGK,EAjBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACjB,OACE,6BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACf,OAAO,kBAAC,EAAD,CACLC,IAAKD,EACLR,GAAIO,EAAKP,GACTF,KAAMS,EAAKT,KACXC,MAAOQ,EAAKR,aCGTW,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,6BACE,2BACEV,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEHI,EATA,SAACC,GACd,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAmBC,OAAO,UAC9DJ,EAAMK,WCiBAC,E,kDAnBb,WAAYN,GAAO,IAAD,8BAChB,cAAMA,IACDO,MAAQ,CACXC,UAAW,GAHG,E,8DAOEC,EAAMC,GACtBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACL,qEAEFG,KAAKX,MAAMK,a,GAhBKQ,aCwDZC,G,wDA9Cb,aAAc,IAAD,8BACX,gBAcFC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAd3C,EAAKZ,MAAO,CACVlB,OAAS,GACT4B,YAAc,IAJL,E,gEAQO,IAAD,OACjBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAG,EAAKZ,SAAS,CAAEvB,OAASmC,S,+BAShC,IAAD,EAC0Bb,KAAKJ,MAA5BlB,EADH,EACGA,OAAQ4B,EADX,EACWA,YACTQ,EAAkBpC,EAAOqC,QAAO,SAAAC,GACtC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAASZ,EAAYW,kBAGnD,OAAIvC,EAAOyC,OAIP,yBAAK7C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1B,OAAQoC,OARnB,2C,GA7BCM,IAAMlB,YCEJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,a","file":"static/js/main.31dc26df.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) =>{\r\n  \r\n  return(\r\n    <div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n      <img alt='photu' src={`https://robohash.org/${id}?200x200`}/>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n  return(\r\n    <div>\r\n      {\r\n        robots.map((user,i) => {\r\n          return(<Card \r\n            key={i} \r\n            id={user.id} \r\n            name={user.name} \r\n            email={user.email}\r\n          />)\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return (\r\n    <div>\r\n      <input \r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search' \r\n        placeholder='Search Robots'\r\n        onChange={searchChange}>\r\n      </input>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return(\r\n      <div style={{overflowY:'scroll',border:'1px solid black', height:'700px'}}>\r\n        {props.children}\r\n      </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError : false \r\n    }\r\n  }\r\n\r\n    componentDidCatch(error,info){\r\n      this.setState({hasError:true});\r\n    }\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n      return <h1>ooops, Something went wrong! hang on!</h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n \r\nexport default ErrorBoundry;","import React from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll'\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state ={\r\n      robots : [],\r\n      searchfield : ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(Response => Response.json())\r\n    .then(users =>this.setState({ robots : users}))\r\n    \r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n      this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n\r\n  render(){\r\n      const {robots, searchfield} = this.state;\r\n      const filteredRobots  = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n      })\r\n\r\n        if(!robots.length){\r\n          return <h1>Loading</h1>\r\n        }else{\r\n          return(\r\n            <div className='tc'>\r\n              <h1 className='f1'>RoboFriends</h1>\r\n              <SearchBox searchChange={this.onSearchChange} />\r\n              <Scroll>\r\n                <ErrorBoundry>  \r\n                  <CardList robots={filteredRobots}/>\r\n                </ErrorBoundry>\r\n              </Scroll>\r\n            </div>\r\n                )   \r\n        }\r\n    \r\n  }\r\n \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}